Structure:
Array list is a dynamic array
It store data and using index to point to the node of data.
LinkedList is a collection of nodes.
It contains 3 part: pointer to previous node, data, pointer to the next node.

Data access:
data access in Array list is very fast since you just need to access through the index.
Data access in Linked List is slower since you will to traverse along the list.

Insert & Delete:
Array List: Slower since you have to re-index everytime for each insert/remove.
Linked List: very fast since you just need to update the previous and next pointer.

Memory usage:
Array List: Smaller, it only need memory for array of items and indexes
Linked List: Bigger, it contain data, previous and next pointer.

Best case usage:
Array List: For updating and reading
Linked List: For insert and removal

1.How many overloaded add() and addAll() methods are available in the List interface? Describe the need and uses.
There are a total of 4 overloaded methods for add() and addAll() methods available in List Interface. The below table states the description of all.

Return      Type	                                                    Method Description
boolean	    add(Element e):                                             This method is used for adding the element at the end of the List. The Datatype of the element is of any type it has been initially assigned with. It returns the boolean indicating successfully inserted or not.
void	    add(int index, Element e):                                  This method is the overloaded version of add() method. In this, along with the element, the index is also passed to the method for the specific index the value needs to be inserted.
boolean	    addAll(Collection <extends ? Element > c):                  This method helps to add all elements at the end of collections from the list received in the parameter. It contains an iterator that helps to iterate the list and add the elements to the collection.
boolean	    addAll(int index, Collection <extends ? Element > c):       This is the overloaded method for addAll() method. In this along with the list, we can pass the specified index from which the list elements need to be added.
